{"version":3,"sources":["helpers/generateRandomInt.js","helpers/createMatrix.js","helpers/computeMatrixCol.js","helpers/computeMatrixRow.js","helpers/sortAndFormatMatrix.js","components/Matrix/Matrix.js","components/root.js","serviceWorker.js","index.js"],"names":["generateInt","Math","random","createMatrix","M","N","X","matrix","Array","fill","map","x","idx","index","toString","id","amount","getRandomInt","numOfClosestCells","computeColumns","reduce","r","a","forEach","b","i","length","computeRows","row","sum","parseInt","sortAndFormat","concat","apply","sort","Matrix","handleIncrementCellValue","state","arr","find","setState","incMatrix","getClosest","num","abs","slice","numOfClosestValue","elem","handleHighlightClosest","value","closestID","formattedMatrix","refs","classList","add","handleRemoveClassName","selector","elems","document","querySelectorAll","remove","handleInputChange","e","target","name","handleCreateMatrix","matrixM","matrixN","matrixX","setting","colSum","rowSum","getElementsByTagName","input","getRowPercentage","showPercentage","returnRowValues","handleAddRow","handleDeleteRow","filter","rowId","this","calcPercentage","parseFloat","toFixed","className","placeholder","type","onChange","required","min","max","onClick","cellPadding","cellSpacing","key","col","onMouseOver","onMouseOut","ref","style","width","ceil","Component","Root","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.98ef13ff.chunk.js","sourcesContent":["export default function generateInt() {\n    //generate random three-digit numbers\n    return ~~(Math.random() * (999 - 0 + 1)) + 0\n}","import getRandomInt from \"./generateRandomInt\";\n\nexport default function createMatrix(M, N, X) {\n\t// Create 2D array with ID and random values\n  return {matrix: Array(M)\n    .fill()\n    .map((x, idx) => {\n\t\t\tlet index = idx.toString()\n\t\t\t//fill matrix with random number\n\t\t\treturn Array(N).fill().map( (x,id) => {\n\t\t\t\treturn {\n\t\t\t\t\tamount: getRandomInt(),\n\t\t\t\t\tid: index + id\n\t\t\t\t}\n\t\t\t})\n\t\t}),\n\t\tnumOfClosestCells: X || 0\n\t}\n}\n","export default function computeColumns(matrix) {\n    // calculate columns sum and find average value\n    let result = matrix ? matrix.reduce((r, a) => {\n        a.forEach(function (b, i) {\n            r[i] = (r[i] || 0) + b.amount;\n        });\n        return r;\n    }, []).map(x => x/matrix.length) : []\n    return result\n}","export default function computeRows(matrix) {\n    // Calculate sum of row values\n    let result = matrix ? matrix.map(row => {\n        return row.reduce( (sum, {amount}) => parseInt(sum + amount), [])\n    }): []\n    return result\n}","export default function sortAndFormat(matrix) {\n    // transorm 2d array to 1d and sort by values\n    let reformatted = [].concat.apply([], matrix)\n    return reformatted.sort((a,b) => a.amount - b.amount);\n}","import React, { Component } from \"react\";\nimport \"./Matrix.css\";\n\nimport createMatrix from \"../../helpers/createMatrix\";\nimport computeColumns from \"../../helpers/computeMatrixCol\";\nimport computeRows from \"../../helpers/computeMatrixRow\";\nimport getRandomInt from \"../../helpers/generateRandomInt\";\nimport sortAndFormat from \"../../helpers/sortAndFormatMatrix\";\n\nexport default class Matrix extends Component {\n  constructor() {\n    super();\n    let setting = createMatrix(10, 10, 4);\n    this.state = {\n      matrix: setting.matrix || [],\n      numOfClosestValue: setting.numOfClosestCells,\n      formattedMatrix: sortAndFormat(setting.matrix),\n      colSum: computeColumns(setting.matrix),\n      rowSum: computeRows(setting.matrix)\n    };\n  }\n\n  handleIncrementCellValue = id => {\n    // find elem by ID and increment\n    this.state.matrix.forEach((arr, idx) => {\n      let findElem = arr.find((x, index) => {\n        if (x.id === id) {\n          this.setState(state => {\n            let incMatrix = [...state.matrix];\n            incMatrix[idx][index] = {\n              ...incMatrix[idx][index],\n              amount: incMatrix[idx][index].amount + 1\n            };\n            return {\n              matrix: incMatrix\n            };\n          });\n        }\n      });\n    });\n  };\n\n  getClosest = (num, arr) => {\n    //find closest values\n    if (arr.length) {\n      if (num < arr[0].amount) {\n        return arr[0];\n      } else if (num > arr[arr.length - 1].amount) {\n        return arr[arr.length - 1];\n      } else {\n        return arr\n          .sort((a, b) => Math.abs(a.amount - num) - Math.abs(b.amount - num))\n          .slice(0, this.state.numOfClosestValue + 1)\n          .map(elem => elem.id);\n      }\n    }\n  };\n\n  handleHighlightClosest = (index, value) => {\n    // get closest values and highlight\n    let closestID = this.getClosest(value, this.state.formattedMatrix) || [];\n    this.setState({\n      formattedMatrix: sortAndFormat(this.state.formattedMatrix)\n    });\n\n    if (closestID.length) {\n      closestID.forEach(id => {\n        if (this.refs[id] && id !== index) {\n          this.refs[id].classList.add(\"hightlight\");\n        }\n      });\n    }\n  };\n\n  handleRemoveClassName = selector => {\n    let elems = [...document.querySelectorAll(`.${selector}`)];\n    if (elems.length)\n      elems.forEach(elem => {\n        elem.classList.remove(selector);\n      });\n  };\n\n  handleInputChange = e => {\n    this.setState({\n      [e.target.name]: parseInt(e.target.value)\n    });\n  };\n\n  handleCreateMatrix = () => {\n    const { matrixM, matrixN, matrixX } = this.state;\n    // init and validate 2d matrix\n\n    this.handleRemoveClassName(\"input-validate\")\n    if (matrixM <= 15 && matrixN <= 15) {\n      let setting = createMatrix(matrixM, matrixN, matrixX);\n      this.setState({\n        matrix: setting.matrix || [],\n        numOfClosestValue: setting.numOfClosestCells,\n        formattedMatrix: sortAndFormat(setting.matrix),\n        colSum: computeColumns(setting.matrix),\n        rowSum: computeRows(setting.matrix)\n      });\n    } else {\n      let inputs = [...document.getElementsByTagName(\"input\")]\n      inputs.forEach(input => {\n        if (input.value > 15) {\n          input.classList.add(\"input-validate\")\n        }\n      })\n    }\n  };\n\n  getRowPercentage = (idx, elem) => {\n    this.setState({ showPercentage: { idx, elem } });\n  };\n\n  returnRowValues = idx => {\n    this.setState({ showPercentage: false });\n  };\n\n  handleAddRow = (elem, idx) => {\n    const { matrixN } = this.state;\n    // add row in the end of the table with random values\n    let arr = Array(matrixN || 10)\n      .fill()\n      .map((elem, index) => {\n        return {\n          amount: getRandomInt(),\n          id: `${this.state.matrix.length.toString() + index}`\n        };\n      });\n    this.setState({\n      matrix: [...this.state.matrix, arr],\n      formattedMatrix: sortAndFormat(this.state.matrix)\n    });\n  };\n\n  handleDeleteRow = (elem, idx) => {\n    // delete selected row from table\n    this.setState({\n      matrix: this.state.matrix.filter((row, rowId) => idx !== rowId),\n      rowSum: this.state.rowSum.filter((row, rowId) => idx !== rowId),\n      formattedMatrix: sortAndFormat(this.state.matrix)\n    });\n  };\n\n  render() {\n    let { matrix, showPercentage } = this.state;\n\n    // Calculate percentage for row cells\n    let calcPercentage = (amount, elem) => {\n      return parseFloat((amount / elem) * 100).toFixed(1);\n    };\n\n    //recompute col & row values when component rerender\n    let colSum = computeColumns(matrix) || [];\n    let rowSum = computeRows(matrix) || [];\n\n    return (\n      <>\n        <div className=\"conrols\">\n          <input\n            placeholder=\"M\"\n            type=\"number\"\n            name=\"matrixM\"\n            onChange={e => this.handleInputChange(e)}\n            required\n            min=\"1\"\n            max=\"15\"\n          ></input>\n          <input\n            placeholder=\"N\"\n            type=\"number\"\n            name=\"matrixN\"\n            onChange={e => this.handleInputChange(e)}\n            required\n            min=\"1\"\n            max='15'\n          ></input>\n          <input\n            placeholder=\"X\"\n            type=\"number\"\n            name=\"matrixX\"\n            onChange={e => this.handleInputChange(e)}\n            required\n            min=\"1\"\n          ></input>\n          <div onClick={() => this.handleCreateMatrix()}>Create matrix</div>\n        </div>\n        <div className=\"matrix-container\">\n          <div className=\"matrix-group\">\n            <table className=\"matrix-table\" cellPadding=\"0\" cellSpacing=\"0\">\n              <tbody>\n                {matrix\n                  ? matrix.map((row, id) => {\n                    return (\n                      <tr key={id}>\n                        {row.map(col => {\n                          return (\n                            <td\n                              key={col.id}\n                              onClick={() => this.handleIncrementCellValue(col.id)}\n                              onMouseOver={() => this.handleHighlightClosest(col.id, col.amount)}\n                              onMouseOut={() => this.handleRemoveClassName(\"hightlight\")}\n                              ref={col.id}\n                            >\n                              <span\n                                className={\n                                  showPercentage && id === showPercentage.idx\n                                    ? \"percentWidth\"\n                                    : \"\"\n                                }\n                                style={{\n                                  width: showPercentage ?\n                                    `${calcPercentage(col.amount, showPercentage.elem)}%`\n                                    : \"\"\n                                }}\n                              >\n                                {showPercentage\n                                  ? id === showPercentage.idx\n                                    ? calcPercentage(col.amount, showPercentage.elem)\n                                    : col.amount\n                                  : col.amount}\n                              </span>\n                            </td>\n                          );\n                        })}\n                      </tr>\n                    );\n                  })\n                  : null}\n                <tr className=\"matrix-colsum\">\n                  {colSum\n                    ? colSum.map((sum, idx) => {\n                      return (\n                        <td key={idx}>\n                          {(sum ^ 0) === sum ? sum : Math.ceil(sum)}\n                        </td>\n                      );\n                    })\n                    : null}\n                </tr>\n              </tbody>\n            </table>\n            <div className=\"sub-matrix-container\">\n              <table className=\"sub-matrix\">\n                <tbody>\n                  {rowSum\n                    ? rowSum.map((elem, idx) => {\n                      return (\n                        <tr key={idx}>\n                          <td\n                            onMouseOver={() => this.getRowPercentage(idx, elem)}\n                            onMouseOut={() => this.returnRowValues(idx)}\n                            key={idx}\n                          >\n                            {elem}\n                          </td>\n                        </tr>\n                      );\n                    })\n                    : null}\n                </tbody>\n              </table>\n              {\n                matrix.length ? <div className=\"addBtn\" onClick={() => this.handleAddRow()}></div> : \"\"\n              }\n            </div>\n            <table className=\"edit-col\">\n              <tbody>\n                {rowSum\n                  ? rowSum.map((elem, idx) => {\n                    return (\n                      <tr key={idx} className=\"button-group\">\n                        <td\n                          onClick={() => this.handleDeleteRow(elem, idx)}\n                          className={\"dltBtn\"}\n                        ></td>\n                      </tr>\n                    );\n                  })\n                  : null}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport './root.css';\nimport Matrix from './Matrix/Matrix'\n\nfunction Root() {\n  return (\n    <div className=\"wrapper\">\n      <Matrix/>\n    </div>\n  );\n}\n\nexport default Root;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/root';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n<App />\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}